2021-0517-01)트리거 Trigger

CREATE OR REPLACE TRIGGER TG_LPROD_INSERT
 AFTER INSERT ON LPROD
BEGIN
 DBMS_OUTPUT.PUT_LINE('분류테이블에 새로운 자료가 추가되었습니다.');
END;
INSERT INTO LPROD VALUES(14,'P601','공산품');
INSERT INTO LPROD VALUES(15,'P602','어패류');
SELECT*FROM LPROD;


오늘이 2005년 6월 14일이라 가정하고 'P202000004' 상품을 15개 매입했을 경우,
매입처리 후 재고수불테이블을 UPDATE하는 트리거를 작성하시오.  
해당 상품의 매입단가는 18000원이다.

CREATE OR REPLACE TRIGGER TG_BUYPROD_INSERT
 AFTER INSERT ON BUYPROD
 FOR EACH ROW
DECLARE
 V_QTY NUMBER:=:NEW.BUY_QTY;
 V_PROD_ID PROD.PROD_ID%TYPE:=:NEW.BUY_PROD;
BEGIN
 UPDATE REMAIN A
    SET REMAIN_I = REMAIN_I + V_QTY, 
        REMAIN_J_99 = REMAIN_J_99+V_QTY,
        REMAIN_DATE = SYSDATE --:NEW:BUY_DATE
  WHERE A.PROD_ID = V_PROD_ID;
END;

INSERT INTO BUYPROD VALUES (SYSDATE,'P202000004',15,18000);
SELECT *FROM REMAIN WHERE REMAIN_YEAR = '2005' AND PROD_ID ='P202000004';




CREATE OR REPLACE TRIGGER TG_EX01
  AFTER INSERT OR DELETE OR UPDATE ON SOURCE_TABLE
  FOR EACH ROW
BEGIN
  IF INSERTING THEN
  
  ELSIF UPDATING THEN
  
  ELSIF DELETING THEN
  
  END IF;
END;

CREATE OR REPLACE TRIGGER TG_CART_INSERT
 AFTER INSERT OR DELETE OR UPDATE ON CART
 FOR EACH ROW
DECLARE
 V_QTY NUMBER;
 V_PROD PROD.PROD_ID%TYPE;
 V_MILEAGE NUMBER;
BEGIN
    V_PROD:=:NEW.CART_PROD;
 IF INSERTING THEN 
    V_QTY:=:NEW.CART_QTY;
 ELSIF UPDATING THEN
    V_QTY:=:NEW.CART_QTY - :OLD.CART_QTY;
 ELSE
    V_QTY:=-(:OLD.CART_QTY);
    V_PROD:=:OLD.CART_PROD;
 END IF;

UPDATE REMAIN
   SET REMAIN_O=REMAIN_O+V_QTY,
       REMAIN_J_99=REMAIN_J_99-V_QTY,
       REMAIN_DATE=SYSDATE
 WHERE PROD_ID = V_PROD;
 
 DBMS_OUTPUT.PUT_LINE(V_PROD||'재고수량 UPDATE');
END;


SELECT * FROM REMAIN
 WHERE PROD_ID = 'P201000017';
 
INSERT INTO CART VALUES('p001','2021051700001','P201000017',90);


UPDATE CART
   SET CART_QTY=40
 WHERE CART_PROD = 'P201000017'
   AND CART_NO = '2021051700001';
   
   
DELETE CART
 WHERE CART_PROD = 'P201000017'
   AND CART_NO = '2021051700001';
   
UPDATE REMAIN
   SET REMAIN_J_99 = 359
  WHERE PROD_ID = 'P201000017';
  
  
회원이 상품을 구매하면 회원테이블의 마일리지도 변경

각 상품마다 마일리지를 변경하시오
상품별 마일리지는 판매가의 1/5000DLEK.
UPDATE PROD
   SET PROD_MILEAGE = TRUNC(PROD_PRICE*1/5000);
COMMIT;

CREATE OR REPLACE TRIGGER TG_CART_INSERT
 AFTER INSERT OR DELETE OR UPDATE ON CART
 FOR EACH ROW
DECLARE
 V_QTY NUMBER;
 V_PROD PROD.PROD_ID%TYPE;
 V_MEMBER MEMBER.MEM_ID%TYPE;
 V_MILEAGE NUMBER:=0;
BEGIN
    V_PROD:=:NEW.CART_PROD;
    V_MEMBER:=:NEW.CART_MEMBER;
    
 IF INSERTING THEN 
    V_QTY:=:NEW.CART_QTY;
 ELSIF UPDATING THEN
    V_QTY:=:NEW.CART_QTY - :OLD.CART_QTY;
 ELSE
    V_QTY:=-(:OLD.CART_QTY);
    V_PROD:=:OLD.CART_PROD;
    V_MEMBER:=:OLD.CART_MEMBER;
 END IF;
    SELECT PROD_MILEAGE
      INTO V_MILEAGE
      FROM PROD
     WHERE PROD_ID = V_PROD;
    
UPDATE REMAIN
   SET REMAIN_O=REMAIN_O+V_QTY,
       REMAIN_J_99=REMAIN_J_99-V_QTY,
       REMAIN_DATE=SYSDATE
 WHERE PROD_ID = V_PROD;
 
UPDATE MEMBER A
   SET MEM_MILEAGE = MEM_MILEAGE + (V_MILEAGE*V_QTY)
 WHERE A.MEM_ID = V_MEMBER;
 
 DBMS_OUTPUT.PUT_LINE(V_PROD||'재고수량 UPDATE');
END;


SELECT * FROM ALL_ERRORS WHERE NAME = 'TG_CART_INSERT'


INSERT INTO CART VALUES('n001','2021051700002','P101000001',20);

select mem_id, mem_name, mem_mileage
  from member
  where mem_id = 'n001';
  
select *
  from remain
where prod_id = 'P101000001';



















